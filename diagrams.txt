-------------------------
JavaScript Run-Time Environment
-------------------------

┌────────────────────────────────┐                        Web APIs
│       JavaScript Engine        │               ┌───────────────────────┐
│ ┌───────────┐    ┌───────────┐ │   ──>   ──>   │     DOM (document)    │
│ │Memory Heap│    │Call Stack │ │               ├───────────────────────┤
│ │  X        │    │           │ │               │ AJAX (XMLHttpRequest) │
│ │       X   │    │           │ │               ├───────────────────────┤
│ │    X      │    │           │ │               │ Timeout (setTimeout)  │
│ │           │    │~~~~~~~~~~~│ │               └───────────────────────┘
│ │           │    │~~~~~~~~~~~│ │  Event Loop           Job Queue 
│ │   X       │    │~~~~~~~~~~~│ │    ┌────┐   [promise] [promise] [promise]
│ │           │    │~~~~~~~~~~~│ │    │    │
│ └───────────┘    └───────────┘ │    └<─  ┘    [onClick] [onLoad] [onDone]
└────────────────────────────────┘                     Callback Queue



-------------------------
Node.js Run-Time Environment
-------------------------

Worker Threads include:
- File System
- Network
- Process

    ┌─────────────┐         ┌──────────────────┐    ┌─────────────────────────────────────────────────────────────────┐
    │ Application │         │ Node.js Bindings │    │ Event Queue                 LIBUV                 Worker Threads│
    └─────────────┘         │                  │    │  ┌-------┐      ┌───  >─┐                            ┌-------┐  │
     ↑ JavaScript ↓         │                  │    │  └-------┘  ─>  │       │  ─> Blocking Operation ─>  └-------┘  │ 
 ┌─────────────────────┐    │                  │    │  ┌-------┐      │ Event │                            ┌-------┐  │
 │         V8          │ ─> │  ┌------------┐  │ ─> │  └-------┘      │ Loop  │                            └-------┘  │
 │       Engine        │ <─ │  │OS Operation│  │ <─ │  ┌-------┐  <─  │       │  <─  Execute Callback  <─  ┌-------┐  │
 │                     │    │  └------------┘  │    │  └-------┘      └─< ────┘                            └-------┘  │
 └─────────────────────┘    └──────────────────┘    └─────────────────────────────────────────────────────────────────┘



-------------------------
V8 Engine
-------------------------

Profiler: Checks for repeating code in the AST. 
          If finding any, the code will be moved to the compiler.

AST: Abstract Syntax Tree
V8 Interpreter: Ignition
V8 Compiler: TurboFan
 
 ┌───────────┐    ┌─────────────────────────────────────────────────────────────────────────┐
 │ script.js │ ─> │   ┌────────┐        ┌─────┐        ┌─────────────┐                      │
 │           │    │   │ Parser │ ──>──> │ AST │ ──>──> │ Interpreter │                      │
 │ <-------  │    │   └────────┘        └─────┘        └──────┬──────┘                      │
 │   -----   │    │                   ▲ (⌐■_■) ▲              │                             │
 │ --------> │    │                  ┌──────────┐             │             ┌──────────┐    │
 └───────────┘    │                  │ Profiler │ <─ <─ <─ <─ ┴──>──>──>──> │ Bytecode │    │
                  │                  └────┬─────┘                           └──────────┘    │
                  │                       │                                                 │
                  │                  ┌────┴─────┐                       ┌────────────────┐  │
                  │                  │ Compiler │ ──>──>──>──>──>──>──> │ Optimized Code │  │
                  │                  └──────────┘                       └────────────────┘  │
                  └─────────────────────────────────────────────────────────────────────────┘



-------------------------
SpiderMonkey Engine
-------------------------

JIT Compiler: IonMonkey
 
 ┌───────────┐    ┌─────────────────────────────────────────────────────────────────────────┐
 │ script.js │ ─> │   ┌──────────┐              ┌───────────┐                               │
 │           │    │   │ Compiler │ ──>──>──>──> │ Byte Code │                               │
 │ <-------  │    │   └──────────┘              └─────┬─────┘                               │
 │   -----   │    │                                   │                                     │
 │ --------> │    │            ┌──────────────┐       │                   ┌─────────────┐   │
 └───────────┘    │            │ JIT Compiler │ <──<──┴──>──>──>──>──>──> │ Interpreter │   │
                  │            └──────┬───────┘                           └─────────────┘   │
                  │                   │                                                     │
                  │             ┌─────┴───────┐                                ┌─────┐      │
                  │             │ Native Code │ ──>──>──>──>──>──>──>──>──>──> │ CPU │      │
                  │             └─────────────┘                                └─────┘      │
                  └─────────────────────────────────────────────────────────────────────────┘
 
 
 
-------------------------
Pass By Value vs Pass By Reference
-------------------------


        PASS BY REFERENCE                             PASS BY VALUE
 ┌──────────┐       ┌──────────┐          ┌────────────┐        ┌────────────┐
 │ object 1 │       │ object 2 │          │ variable 1 │        │ variable 2 │
 └──────────┘       └──────────┘          └────────────┘        └────────────┘
       \                 /                       │                     │
        \               /                        │                     │
 ┌─────────────────────────────┐          ┌────────────┐        ┌────────────┐
 │        object memory        │          │  primitive │        │  primitive │
 │     non-primitive type      │          │    type    │        │    type    │
 └─────────────────────────────┘          └────────────┘        └────────────┘



-------------------------
Concurrency and Parallelism
-------------------------

    Concurrency        Concurrency + parallelism
 (Singe-Core CPU)           (Multi-Core CPU)
 
    ┌───┐                      ┌───┐┌───┐
    │th1│                      │th1││th2│
    │   │                      │   │└───┘
    └───┘┌───┐                 │   │┌───┐
         │th2│                 └───┘│th2│
    ┌───┐└───┘                 ┌───┐└───┘
    │th1│                      │th1│
    └───┘┌───┐                 │   │┌───┐
         │th2│                 │   ││th2│
         └───┘                 └───┘└───┘
